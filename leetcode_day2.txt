Day-2 Programming:

2169. Count Operations to Obtain Zero

Solution:

class Solution {
    public int countOperations(int num1, int num2) {
        int count=0;
        while(num1!=0 && num2!=0)
        {
        if(num1>=num2)
        {
           num1= num1-num2;
        }
        else
        {
            num2=num2-num1;
        }
        count++;
        
    }
    return count;
    }
}

-----------------------------------------------------------------------------------


1342. Number of Steps to Reduce a Number to Zero
Solution:

class Solution {
    public int numberOfSteps(int num) {
        int count=0;
        while(num>0)
        {
            if(num%2!=0)
            {
                num=num-1;
                count++;
            }
            else
            {
            num/=2;
            count++;
            }
        }
        return count;
        
    }
}
-------------------------------------------------------------------------------------
2535. Difference Between Element Sum and Digit Sum of an Array

Solution:

class Solution {
    public int differenceOfSum(int[] nums) {
        int sum=0;
        int sum1=0;
        int f;
        for(int i=0;i<nums.length;i++)
        {
            sum+=nums[i];

        }
        for(int k=0;k<nums.length;k++)
        {
            while(nums[k]>0)
            {
             f=nums[k]%10;
            sum1=sum1+f;
            nums[k]/=10;
        }
        }
        return Math.abs(sum-sum1);
        
        
    }
}
----------------------------------------------------------------------
2520. Count the Digits That Divide a Number
Solution:

class Solution {
    public int countDigits(int num) {
        int k;
        int count=0;
        int dup=num;
        while(num!=0)
        {
            
                k=num%10;
                if(dup%k==0)
                {
                    count++;
                }
                num/=10;

            }
        
        return count;
        
    }
}

-----------------------------------------------------------------------------------------
1486. XOR Operation in an Array

Solution:

class Solution {
    public int xorOperation(int n, int start) {
     int sum=0;
     int val=0;
        int nums[]=new int[n];
        for(int i=0;i<n;i++)
        {
           val=start+2*i;
           sum^=val;
        }
        return sum;
      
        
    }
}
--------------------------------------------------------------------------------------
1588. Sum of All Odd Length Subarrays

Solution:

class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int sum=0;
        int n = arr.length;
        for(int i=0; i<arr.length; i++){
            int left = i+1;
            int right = n-i;
            int k = left * right;
            int odd = (k+1)/2;
            sum = sum + odd*arr[i];
        }
        return sum;

    }
}

------------------------------------------------------------------------------




