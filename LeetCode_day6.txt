1929. Concatenation of Array

Solution:

class Solution {
    public int[] getConcatenation(int[] nums) {
        int n=nums.length;
        int ans[]=new int[nums.length*2];
        for(int i=0;i<nums.length;i++)
        {
            ans[i] = nums[i];
            ans[i + n] = nums[i];
        }
        return ans;
        
    }
}
------------------------------------------------------------------------------------
2011. Final Value of Variable After Performing Operations
Solution:

class Solution {
    public int finalValueAfterOperations(String[] operations) {
        int x=0;
        for(int i=0;i<operations.length;i++)
        {
            if(operations[i].contains("--"))
            {
                x+=-1;
            }
            else
            {
                x+=1;
            }
        }
        return x;
        
    }
}
------------------------------------------------------------------------------------------------------
1470. Shuffle the Array
Solution:

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int ans[]= new int[2*n];
        int i=0,j=n;
        for(int k=0; k<n*2; k=k+2)
        {
         ans[k]= nums[i];
         ans[k+1]= nums[j];
         i++;
         j++;
        }
        return ans;
        
    }
}
-----------------------------------------------------------------------------------------------
1920. Build Array from Permutation

Solution:

class Solution {
    public int[] buildArray(int[] nums) {
        int ans[]=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
        ans[i] = nums[nums[i]];
        }
        return ans;
        
    }
}
--------------------------------------------------------------------------------------------------

